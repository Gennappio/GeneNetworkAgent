#!/usr/bin/env python3
"""
Gene Network Quality Agent - LangChain Production Version

A structured approach to gene network analysis with LLM integration using LangChain.
"""

import argparse
import sys
import os
from pathlib import Path
from typing import List
import logging

# LangChain imports
from langchain_openai import ChatOpenAI

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class GeneAgent:
    """Main Gene Network Quality Agent with LangChain integration"""

    def __init__(self, verbose: bool = False):
        self.verbose = verbose
        if verbose:
            logger.setLevel(logging.DEBUG)

        # OpenAI API key from environment variable
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            logger.error("OPENAI_API_KEY environment variable not set")
            sys.exit(1)

        # Set up LangChain ChatOpenAI
        try:
            self.llm = ChatOpenAI(
                api_key=self.openai_api_key,
                model="gpt-3.5-turbo",
                temperature=0.1,
                max_tokens=2000
            )
            logger.info("LangChain ChatOpenAI initialized")
        except ImportError:
            logger.error("LangChain packages not installed. Run: pip install langchain langchain-openai")
            sys.exit(1)





    def run_default_pipeline(self, model_path: str) -> str:
        """
        Run analysis pipeline with natural language communication between agents

        Args:
            model_path: Path to .bnd network file

        Returns:
            Path to generated report file
        """
        logger.info(f"Running analysis pipeline on {model_path}")

        # Dynamically discover and order analysis agents
        from reasoning_agents.tool_executor import discover_available_tools
        available_tools_dict = discover_available_tools()

        # Sort tools by priority (higher priority first)
        sorted_tools = sorted(
            available_tools_dict.items(),
            key=lambda x: x[1]['definition'].get('priority', 50),
            reverse=True
        )

        agents = [
            (tool_info['display_name'], tool_info['module'])
            for _, tool_info in sorted_tools
        ]

        # Initialize with just the model path
        context = f"Analyzing gene network: {model_path}"
        analysis_results = []

        # Run each agent and collect natural language results
        for step, (agent_name, agent_module) in enumerate(agents, 1):
            logger.info(f"Step {step}: {agent_name}...")

            # Import and execute agent
            module_parts = agent_module.split('.')
            module = __import__(agent_module, fromlist=[module_parts[-1]])
            agent_result = module.execute_natural_language(context, model_path)

            # Collect the natural language evaluation
            analysis_results.append(f"## {agent_name}\n{agent_result}\n")

            # Update context for next agent
            context += f"\n\nPrevious analysis from {agent_name}:\n{agent_result}"

        # Generate final report
        logger.info("Generating final report...")
        report_path = self._generate_natural_language_report(model_path, analysis_results)

        logger.info(f"Analysis pipeline completed. Report: {report_path}")
        return report_path
        

        

        
    def _generate_natural_language_report(self, model_path: str, analysis_results: List[str]) -> str:
        """Generate natural language report from agent evaluations"""

        # Create reports directory
        reports_dir = Path("reports")
        reports_dir.mkdir(exist_ok=True)

        # Generate timestamp
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        # Create natural language report
        report_content = f"""# Gene Network Analysis Report

            **Network:** {Path(model_path).name}
            **Analysis Date:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
            **Report Type:** Comprehensive Analysis Pipeline

            ## Executive Summary

            This report presents a comprehensive analysis of the gene network using multiple specialized agents. Each agent provides an independent evaluation in natural language, making the results accessible to both technical and biological researchers.

            ## Detailed Analysis Results

            {''.join(analysis_results)}

            ## Conclusion

            The analysis pipeline has completed successfully. Each agent has provided its specialized evaluation above. This natural language format allows for easy interpretation and integration of results across different analytical perspectives.

            ---
            *Generated by Gene Network Quality Agent - Natural Language Pipeline*
            """

        # Save natural language report
        report_path = reports_dir / f"analysis_report_{timestamp}.md"
        with open(report_path, 'w') as f:
            f.write(report_content)

        logger.info(f"Natural language report: {report_path}")

        return str(report_path)














    def _save_biologist_summary(self, report_path: str, summary: str, focus: str) -> str:
        """Save biologist-friendly summary"""
        summary_path = report_path.replace('.md', f'_biologist_summary_{focus.replace(" ", "_")}.md')

        with open(summary_path, 'w') as f:
            f.write(f"# Gene Network Analysis Summary\n\n")
            f.write(f"**Focus:** {focus}\n\n")
            f.write(f"**Source Report:** {report_path}\n\n")
            f.write(summary)

        return summary_path


def main():
    """Main CLI entry point"""
    parser = argparse.ArgumentParser(
        description="Gene Network Quality Agent - Structured Analysis with LLM Integration",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
            Examples:
            # Run default analysis pipeline
            python gene_agent.py network.bnd --default-pipeline

            # Refine analysis with LLM review
            python gene_agent.py --refine report.yaml

            # Ask specific question about analysis
            python gene_agent.py --refine report.yaml --ask "What are the key regulatory hubs?"

            # Create biologist summary
            python gene_agent.py --refine report.yaml --summarize "therapeutic targets"
                    """
    )

    # Positional argument for network file (optional)
    parser.add_argument('network_file', nargs='?', help='Path to .bnd network file')

    # Mode flags
    parser.add_argument('--default-pipeline', action='store_true',
                       help='Run standard analysis pipeline and generate structured report')
    parser.add_argument('--refine', metavar='REPORT_FILE',
                       help='Refine analysis using LLM review of existing report')
    parser.add_argument('--ask', metavar='QUESTION',
                       help='Ask specific question about the analysis (use with --refine)')
    parser.add_argument('--summarize', metavar='FOCUS',
                       help='Create biologist-friendly summary with given focus (use with --refine)')

    # Options
    parser.add_argument('--model', default='gpt-3.5-turbo',
                       help='AI model to use (default: gpt-3.5-turbo)')
    parser.add_argument('--verbose', action='store_true',
                       help='Enable verbose logging')

    args = parser.parse_args()

    # Show help if no arguments
    if len(sys.argv) == 1:
        parser.print_help()
        return

    # Initialize agent
    agent = GeneAgent(verbose=args.verbose)

    try:
        if args.default_pipeline:
            if not args.network_file:
                print("Error: Network file required for --default-pipeline")
                sys.exit(1)
            report_path = agent.run_default_pipeline(args.network_file)
            print(f"Analysis complete. Report: {report_path}")

        elif args.refine:
            # Load the report content
            with open(args.refine, 'r') as f:
                report_content = f.read()

            # Extract model path for tool execution
            from reasoning_agents.tool_executor import extract_model_path_from_report
            model_path = extract_model_path_from_report(args.refine)

            if args.ask:
                # Use question agent directly
                from reasoning_agents.question_agent import execute_natural_language
                answer = execute_natural_language(report_content, args.ask, model_path)
                print(answer)

            elif args.summarize:
                # Use summary agent directly
                from reasoning_agents.summary_agent import execute_natural_language
                summary = execute_natural_language(report_content, args.summarize)

                # Save the summary
                summary_path = args.refine.replace('.md', f'_biologist_summary_{args.summarize.replace(" ", "_")}.md')
                with open(summary_path, 'w') as f:
                    f.write(f"# Gene Network Analysis Summary\n\n")
                    f.write(f"**Focus:** {args.summarize}\n\n")
                    f.write(f"**Source Report:** {args.refine}\n\n")
                    f.write(summary)
                print(f"Summary created: {summary_path}")

            else:
                # Use refinement agent directly
                from reasoning_agents.refinement_agent import execute_natural_language
                suggestions = execute_natural_language(report_content, model_path=model_path)
                print(suggestions)

        else:
            print("Error: Please specify a mode (--default-pipeline or --refine)")
            parser.print_help()
            sys.exit(1)

    except Exception as e:
        logger.error(f"Error: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
